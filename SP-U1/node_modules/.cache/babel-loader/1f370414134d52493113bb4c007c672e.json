{"ast":null,"code":"import _toConsumableArray from \"/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof module:workbox-precaching\n */\n\nexport function removeIgnoredSearchParams(urlObject) {\n  var ignoreURLParametersMatching = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var _loop = function _loop() {\n    var paramName = _arr[_i];\n\n    if (ignoreURLParametersMatching.some(function (regExp) {\n      return regExp.test(paramName);\n    })) {\n      urlObject.searchParams.delete(paramName);\n    }\n  };\n\n  // Convert the iterable into an array at the start of the loop to make sure\n  // deletion doesn't mess up iteration.\n  for (var _i = 0, _arr = _toConsumableArray(urlObject.searchParams.keys()); _i < _arr.length; _i++) {\n    _loop();\n  }\n\n  return urlObject;\n}","map":{"version":3,"sources":["/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js"],"names":["removeIgnoredSearchParams","urlObject","ignoreURLParametersMatching","paramName","some","regExp","test","searchParams","delete","keys"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASA,yBAAT,CAAmCC,SAAnC,EAAgF;AAAA,MAAlCC,2BAAkC,uEAAJ,EAAI;;AAAA;AAG9E,QAAMC,SAAS,WAAf;;AACD,QAAID,2BAA2B,CAACE,IAA5B,CAAiC,UAACC,MAAD;AAAA,aAAYA,MAAM,CAACC,IAAP,CAAYH,SAAZ,CAAZ;AAAA,KAAjC,CAAJ,EAA0E;AACtEF,MAAAA,SAAS,CAACM,YAAV,CAAuBC,MAAvB,CAA8BL,SAA9B;AACH;AAN8E;;AACnF;AACA;AACA,6CAA4BF,SAAS,CAACM,YAAV,CAAuBE,IAAvB,EAA5B,2BAA4D;AAAA;AAI3D;;AACD,SAAOR,SAAP;AACH","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n"]},"metadata":{},"sourceType":"module"}