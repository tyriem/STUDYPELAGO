{"ast":null,"code":"import _classCallCheck from \"/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\n\nvar Route =\n/**\n * Constructor for Route class.\n *\n * @param {module:workbox-routing~matchCallback} match\n * A callback function that determines whether the route matches a given\n * `fetch` event by returning a non-falsy value.\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resolving to a Response.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n */\nfunction Route(match, handler) {\n  var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultMethod;\n\n  _classCallCheck(this, Route);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isType(match, 'function', {\n      moduleName: 'workbox-routing',\n      className: 'Route',\n      funcName: 'constructor',\n      paramName: 'match'\n    });\n\n    if (method) {\n      assert.isOneOf(method, validMethods, {\n        paramName: 'method'\n      });\n    }\n  } // These values are referenced directly by Router so cannot be\n  // altered by minificaton.\n\n\n  this.handler = normalizeHandler(handler);\n  this.match = match;\n  this.method = method;\n};\n\nexport { Route };","map":{"version":3,"sources":["/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/workbox-routing/Route.js"],"names":["assert","defaultMethod","validMethods","normalizeHandler","Route","match","handler","method","process","env","NODE_ENV","isType","moduleName","className","funcName","paramName","isOneOf"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,iCAAvB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,sBAA5C;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,K;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,eAAYC,KAAZ,EAAmBC,OAAnB,EAAoD;AAAA,MAAxBC,MAAwB,uEAAfN,aAAe;;AAAA;;AAChD,MAAIO,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCV,IAAAA,MAAM,CAACW,MAAP,CAAcN,KAAd,EAAqB,UAArB,EAAiC;AAC7BO,MAAAA,UAAU,EAAE,iBADiB;AAE7BC,MAAAA,SAAS,EAAE,OAFkB;AAG7BC,MAAAA,QAAQ,EAAE,aAHmB;AAI7BC,MAAAA,SAAS,EAAE;AAJkB,KAAjC;;AAMA,QAAIR,MAAJ,EAAY;AACRP,MAAAA,MAAM,CAACgB,OAAP,CAAeT,MAAf,EAAuBL,YAAvB,EAAqC;AAAEa,QAAAA,SAAS,EAAE;AAAb,OAArC;AACH;AACJ,GAX+C,CAYhD;AACA;;;AACA,OAAKT,OAAL,GAAeH,gBAAgB,CAACG,OAAD,CAA/B;AACA,OAAKD,KAAL,GAAaA,KAAb;AACA,OAAKE,MAAL,GAAcA,MAAd;AACH,C;;AAEL,SAASH,KAAT","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n}\nexport { Route };\n"]},"metadata":{},"sourceType":"module"}