{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tm/Documents/CODE/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tm/Documents/CODE/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tm/Documents/CODE/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tm/Documents/CODE/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [cache-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If there is no cache match, this will throw a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\n\nvar CacheOnly = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  function CacheOnly() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CacheOnly);\n\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  _createClass(CacheOnly, [{\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var event, request, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event = _ref.event, request = _ref.request;\n\n                if (typeof request === 'string') {\n                  request = new Request(request);\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-strategies',\n                    className: 'CacheOnly',\n                    funcName: 'makeRequest',\n                    paramName: 'request'\n                  });\n                }\n\n                _context.next = 5;\n                return cacheWrapper.match({\n                  cacheName: this._cacheName,\n                  request: request,\n                  event: event,\n                  matchOptions: this._matchOptions,\n                  plugins: this._plugins\n                });\n\n              case 5:\n                response = _context.sent;\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.groupCollapsed(messages.strategyStart('CacheOnly', request));\n\n                  if (response) {\n                    logger.log(\"Found a cached response in the '\".concat(this._cacheName, \"'\") + \" cache.\");\n                    messages.printFinalResponse(response);\n                  } else {\n                    logger.log(\"No response found in the '\".concat(this._cacheName, \"' cache.\"));\n                  }\n\n                  logger.groupEnd();\n                }\n\n                if (response) {\n                  _context.next = 9;\n                  break;\n                }\n\n                throw new WorkboxError('no-response', {\n                  url: request.url\n                });\n\n              case 9:\n                return _context.abrupt(\"return\", response);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handle(_x) {\n        return _handle.apply(this, arguments);\n      }\n\n      return handle;\n    }()\n  }]);\n\n  return CacheOnly;\n}();\n\nexport { CacheOnly };","map":{"version":3,"sources":["/Users/tm/Documents/CODE/STUDYPELAGO/node_modules/workbox-strategies/CacheOnly.js"],"names":["assert","cacheNames","cacheWrapper","logger","WorkboxError","messages","CacheOnly","options","_cacheName","getRuntimeName","cacheName","_plugins","plugins","_matchOptions","matchOptions","event","request","Request","process","env","NODE_ENV","isInstance","moduleName","className","funcName","paramName","match","response","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,iCAAvB;AACA,SAASC,UAAT,QAA2B,qCAA3B;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,S;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,uBAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACtB,SAAKC,UAAL,GAAkBP,UAAU,CAACQ,cAAX,CAA0BF,OAAO,CAACG,SAAlC,CAAlB;AACA,SAAKC,QAAL,GAAgBJ,OAAO,CAACK,OAAR,IAAmB,EAAnC;AACA,SAAKC,aAAL,GAAqBN,OAAO,CAACO,YAA7B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;6EACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAeC,gBAAAA,KAAf,QAAeA,KAAf,EAAsBC,OAAtB,QAAsBA,OAAtB;;AACI,oBAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC7BA,kBAAAA,OAAO,GAAG,IAAIC,OAAJ,CAAYD,OAAZ,CAAV;AACH;;AACD,oBAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCpB,kBAAAA,MAAM,CAACqB,UAAP,CAAkBL,OAAlB,EAA2BC,OAA3B,EAAoC;AAChCK,oBAAAA,UAAU,EAAE,oBADoB;AAEhCC,oBAAAA,SAAS,EAAE,WAFqB;AAGhCC,oBAAAA,QAAQ,EAAE,aAHsB;AAIhCC,oBAAAA,SAAS,EAAE;AAJqB,mBAApC;AAMH;;AAXL;AAAA,uBAY2BvB,YAAY,CAACwB,KAAb,CAAmB;AACtChB,kBAAAA,SAAS,EAAE,KAAKF,UADsB;AAEtCQ,kBAAAA,OAAO,EAAPA,OAFsC;AAGtCD,kBAAAA,KAAK,EAALA,KAHsC;AAItCD,kBAAAA,YAAY,EAAE,KAAKD,aAJmB;AAKtCD,kBAAAA,OAAO,EAAE,KAAKD;AALwB,iBAAnB,CAZ3B;;AAAA;AAYUgB,gBAAAA,QAZV;;AAmBI,oBAAIT,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCjB,kBAAAA,MAAM,CAACyB,cAAP,CAAsBvB,QAAQ,CAACwB,aAAT,CAAuB,WAAvB,EAAoCb,OAApC,CAAtB;;AACA,sBAAIW,QAAJ,EAAc;AACVxB,oBAAAA,MAAM,CAAC2B,GAAP,CAAW,0CAAmC,KAAKtB,UAAxC,kBAAX;AAEAH,oBAAAA,QAAQ,CAAC0B,kBAAT,CAA4BJ,QAA5B;AACH,mBAJD,MAKK;AACDxB,oBAAAA,MAAM,CAAC2B,GAAP,qCAAwC,KAAKtB,UAA7C;AACH;;AACDL,kBAAAA,MAAM,CAAC6B,QAAP;AACH;;AA9BL,oBA+BSL,QA/BT;AAAA;AAAA;AAAA;;AAAA,sBAgCc,IAAIvB,YAAJ,CAAiB,aAAjB,EAAgC;AAAE6B,kBAAAA,GAAG,EAAEjB,OAAO,CAACiB;AAAf,iBAAhC,CAhCd;;AAAA;AAAA,iDAkCWN,QAlCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAqCJ,SAASrB,SAAT","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [cache-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If there is no cache match, this will throw a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass CacheOnly {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'CacheOnly',\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        const response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('CacheOnly', request));\n            if (response) {\n                logger.log(`Found a cached response in the '${this._cacheName}'` +\n                    ` cache.`);\n                messages.printFinalResponse(response);\n            }\n            else {\n                logger.log(`No response found in the '${this._cacheName}' cache.`);\n            }\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n}\nexport { CacheOnly };\n"]},"metadata":{},"sourceType":"module"}