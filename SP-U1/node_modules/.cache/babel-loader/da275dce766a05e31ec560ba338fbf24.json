{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tm/Documents/CODE/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\n\nvar isArray = function isArray(value, details) {\n  if (!Array.isArray(value)) {\n    throw new WorkboxError('not-an-array', details);\n  }\n};\n\nvar hasMethod = function hasMethod(object, expectedMethod, details) {\n  var type = typeof object[expectedMethod];\n\n  if (type !== 'function') {\n    details['expectedMethod'] = expectedMethod;\n    throw new WorkboxError('missing-a-method', details);\n  }\n};\n\nvar isType = function isType(object, expectedType, details) {\n  if (typeof object !== expectedType) {\n    details['expectedType'] = expectedType;\n    throw new WorkboxError('incorrect-type', details);\n  }\n};\n\nvar isInstance = function isInstance(object, expectedClass, details) {\n  if (!(object instanceof expectedClass)) {\n    details['expectedClass'] = expectedClass;\n    throw new WorkboxError('incorrect-class', details);\n  }\n};\n\nvar isOneOf = function isOneOf(value, validValues, details) {\n  if (!validValues.includes(value)) {\n    details['validValueDescription'] = \"Valid values are \".concat(JSON.stringify(validValues), \".\");\n    throw new WorkboxError('invalid-value', details);\n  }\n};\n\nvar isArrayOfClass = function isArrayOfClass(value, expectedClass, details) {\n  var error = new WorkboxError('not-array-of-class', details);\n\n  if (!Array.isArray(value)) {\n    throw error;\n  }\n\n  var _iterator = _createForOfIteratorHelper(value),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n\n      if (!(item instanceof expectedClass)) {\n        throw error;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\nvar finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\n  hasMethod: hasMethod,\n  isArray: isArray,\n  isInstance: isInstance,\n  isOneOf: isOneOf,\n  isType: isType,\n  isArrayOfClass: isArrayOfClass\n};\nexport { finalAssertExports as assert };","map":{"version":3,"sources":["/Users/tm/Documents/CODE/STUDYPELAGO/node_modules/workbox-core/_private/assert.js"],"names":["WorkboxError","isArray","value","details","Array","hasMethod","object","expectedMethod","type","isType","expectedType","isInstance","expectedClass","isOneOf","validValues","includes","JSON","stringify","isArrayOfClass","error","item","finalAssertExports","process","env","NODE_ENV","assert"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,6BAA7B;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,OAAR,EAAoB;AAChC,MAAI,CAACC,KAAK,CAACH,OAAN,CAAcC,KAAd,CAAL,EAA2B;AACvB,UAAM,IAAIF,YAAJ,CAAiB,cAAjB,EAAiCG,OAAjC,CAAN;AACH;AACJ,CAJD;;AAKA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASC,cAAT,EAAyBJ,OAAzB,EAAqC;AACnD,MAAMK,IAAI,GAAG,OAAOF,MAAM,CAACC,cAAD,CAA1B;;AACA,MAAIC,IAAI,KAAK,UAAb,EAAyB;AACrBL,IAAAA,OAAO,CAAC,gBAAD,CAAP,GAA4BI,cAA5B;AACA,UAAM,IAAIP,YAAJ,CAAiB,kBAAjB,EAAqCG,OAArC,CAAN;AACH;AACJ,CAND;;AAOA,IAAMM,MAAM,GAAG,SAATA,MAAS,CAACH,MAAD,EAASI,YAAT,EAAuBP,OAAvB,EAAmC;AAC9C,MAAI,OAAOG,MAAP,KAAkBI,YAAtB,EAAoC;AAChCP,IAAAA,OAAO,CAAC,cAAD,CAAP,GAA0BO,YAA1B;AACA,UAAM,IAAIV,YAAJ,CAAiB,gBAAjB,EAAmCG,OAAnC,CAAN;AACH;AACJ,CALD;;AAMA,IAAMQ,UAAU,GAAG,SAAbA,UAAa,CAACL,MAAD,EAASM,aAAT,EAAwBT,OAAxB,EAAoC;AACnD,MAAI,EAAEG,MAAM,YAAYM,aAApB,CAAJ,EAAwC;AACpCT,IAAAA,OAAO,CAAC,eAAD,CAAP,GAA2BS,aAA3B;AACA,UAAM,IAAIZ,YAAJ,CAAiB,iBAAjB,EAAoCG,OAApC,CAAN;AACH;AACJ,CALD;;AAMA,IAAMU,OAAO,GAAG,SAAVA,OAAU,CAACX,KAAD,EAAQY,WAAR,EAAqBX,OAArB,EAAiC;AAC7C,MAAI,CAACW,WAAW,CAACC,QAAZ,CAAqBb,KAArB,CAAL,EAAkC;AAC9BC,IAAAA,OAAO,CAAC,uBAAD,CAAP,8BACwBa,IAAI,CAACC,SAAL,CAAeH,WAAf,CADxB;AAEA,UAAM,IAAId,YAAJ,CAAiB,eAAjB,EAAkCG,OAAlC,CAAN;AACH;AACJ,CAND;;AAOA,IAAMe,cAAc,GAAG,SAAjBA,cAAiB,CAAChB,KAAD,EAAQU,aAAR,EAAuBT,OAAvB,EAAmC;AACtD,MAAMgB,KAAK,GAAG,IAAInB,YAAJ,CAAiB,oBAAjB,EAAuCG,OAAvC,CAAd;;AACA,MAAI,CAACC,KAAK,CAACH,OAAN,CAAcC,KAAd,CAAL,EAA2B;AACvB,UAAMiB,KAAN;AACH;;AAJqD,6CAKnCjB,KALmC;AAAA;;AAAA;AAKtD,wDAA0B;AAAA,UAAfkB,IAAe;;AACtB,UAAI,EAAEA,IAAI,YAAYR,aAAlB,CAAJ,EAAsC;AAClC,cAAMO,KAAN;AACH;AACJ;AATqD;AAAA;AAAA;AAAA;AAAA;AAUzD,CAVD;;AAWA,IAAME,kBAAkB,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,IAAxC,GAA+C;AACtEnB,EAAAA,SAAS,EAATA,SADsE;AAEtEJ,EAAAA,OAAO,EAAPA,OAFsE;AAGtEU,EAAAA,UAAU,EAAVA,UAHsE;AAItEE,EAAAA,OAAO,EAAPA,OAJsE;AAKtEJ,EAAAA,MAAM,EAANA,MALsE;AAMtES,EAAAA,cAAc,EAAdA;AANsE,CAA1E;AAQA,SAASG,kBAAkB,IAAII,MAA/B","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, expectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClass'] = expectedClass;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] =\n            `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, expectedClass, details) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\n    hasMethod,\n    isArray,\n    isInstance,\n    isOneOf,\n    isType,\n    isArrayOfClass,\n};\nexport { finalAssertExports as assert };\n"]},"metadata":{},"sourceType":"module"}