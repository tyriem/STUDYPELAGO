{"ast":null,"code":"/// FIREBASE STUFF\n// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport firebase from \"firebase/app\"; // Add the Firebase services that you want to use\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/functions\";\nimport \"firebase/storage\"; // THIS HOLDS THE DATA\n\nconst data = [];\nexport const initializeFirebase = () => {\n  //INITIALIZE FIREBASE\n  var firebaseConfig = {}; // Initialize Firebase\n\n  if (firebase.apps.length === 0) {\n    firebase.initializeApp({\n      apiKey: process.env.REACT_APP_FIREBASE_CONFIG_API_KEY,\n      projectId: process.env.REACT_APP_FIREBASE_CONFIG_PROJECT_ID,\n      storageBucket: process.env.REACT_APP_FIREBASE_CONFIG_STORAGE_BUCKET\n    });\n  }\n};\ninitializeFirebase(); // SAVE IMAGE\n//\n// path where data is stored in firebase storage\n\nconst STORAGE_FILE_PATH = \"images/tutors\"; // main collection name\n\nconst COLLECTION_NAME_TUTOR = \"tutor-listing\"; // main collection name\n\nconst COLLECTION_NAME_COURSE = \"course-listing\";\n/**\n * Saves the image to the database and returns either an error or information\n * about the object that you just saved\n * \n * @param imageData - File\n * @returns \n */\n\nexport const saveImage = async imageData => {\n  // we need the function to be async so we wrap the whole thing in a \n  // promise. We return result using the resolve parameter and an error\n  // using the reject parameter\n  return new Promise((resolve, reject) => {\n    // get a reference to our storage in the database\n    const storageRef = firebase.storage().ref(); // create a unique path name for the image\n\n    let uniquePathName = new Date().getTime() + \"-\" + imageData.name; // get the reference that includes path in database plus the \n    // unique name we used for the image we are saving\n\n    let ref = storageRef.child(STORAGE_FILE_PATH + uniquePathName); // start the upload process, we are also including the file type \n    // with the upload...\n\n    let uploadTask = ref.put(imageData, {\n      contentType: imageData.type\n    }); // here we listen for specific events and take action when needed\n    // error - we reject the promise and return the error we got\n    // complete - we need to get the download url and then gather other pieces\n    //   of data we want to return to the user, create an object and resolve\n    //   the promise with the data\n\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, {\n      'next': s => null,\n      'error': error => {\n        console.log(error);\n        reject(error);\n      },\n      'complete': async () => {\n        console.log('upload complete!');\n        let downloadUrl = await uploadTask.snapshot.ref.getDownloadURL();\n        let data = {\n          //   metaData: uploadTask.snapshot.metadata,\n          downloadUrl,\n          name: uploadTask.snapshot.metadata.name,\n          image: {\n            ref: uploadTask.snapshot.ref.fullPath,\n            size: uploadTask.snapshot.metadata.size,\n            contentType: uploadTask.snapshot.metadata.contentType,\n            timeCreated: uploadTask.snapshot.metadata.timeCreated\n          }\n        };\n        resolve({\n          data\n        });\n      }\n    });\n  });\n}; // READ DATA\n// https://firebase.google.com/docs/firestore/query-data/get-data\n\nexport const getTutorData = async () => {\n  // get firebase firestore database\n  const db = firebase.firestore();\n  const results = []; // --\n  // GET ALL THE DOCUMENTS\n\n  const querySnapshot = await db.collection(COLLECTION_NAME_TUTOR).get(); // loop through documents\n\n  querySnapshot.forEach(doc => {\n    // doc.data() is never undefined for query doc snapshots\n    console.log(doc.id, \" => \", doc.data());\n    results.push({\n      id: doc.id,\n      ...doc.data() // <- JAVASCRIPT DESTRUCTURING\n\n    });\n  });\n  console.log(results);\n  return results;\n}; // READ DATA\n// https://firebase.google.com/docs/firestore/query-data/get-data\n\nexport const getCourseData = async () => {\n  // get firebase firestore database\n  const db = firebase.firestore();\n  const results = []; // --\n  // GET ALL THE DOCUMENTS\n\n  const querySnapshot = await db.collection(COLLECTION_NAME_COURSE).get(); // loop through ocuments\n\n  querySnapshot.forEach(doc => {\n    // doc.data() is never undefined for query doc snapshots\n    console.log(doc.id, \" => \", doc.data());\n    results.push({\n      id: doc.id,\n      ...doc.data() // <- JAVASCRIPT DESTRUCTURING\n\n    });\n  });\n  console.log(results);\n  return results;\n};\n/**\n * \n * @param tutorData \n * @returns \n */\n\nexport const updateTutor = async tutorData => {\n  // get firebase firestore database\n  const db = firebase.firestore();\n\n  try {\n    const data = await db.collection(COLLECTION_NAME_TUTOR).doc().set(tutorData);\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    return {\n      data: null,\n      error\n    };\n  }\n};\n/**\n * \n * @param id \n */\n\nexport const getDataByTutorId = id => {\n  // get firebase firestore database\n  const db = firebase.firestore(); // get a reference to a specific document\n\n  const docRef = db.collection(COLLECTION_NAME_TUTOR).doc(id);\n  return docRef.get().then(doc => {\n    if (doc.exists) {\n      console.log(\"Document data:\", doc.data());\n      return {\n        id: doc.id,\n        ...doc.data()\n      };\n    } else {\n      // doc.data() will be undefined in this case\n      console.log(\"No such document!\");\n    }\n  }).catch(error => {\n    console.log(\"Error getting document:\", error);\n  });\n};\n/**\n * \n * @param courseData \n * @returns \n */\n\nexport const updateCourse = async courseData => {\n  // get firebase firestore database\n  const db = firebase.firestore();\n\n  try {\n    const data = await db.collection(COLLECTION_NAME_COURSE).doc().set(courseData);\n    return {\n      data,\n      error: null\n    };\n  } catch (error) {\n    return {\n      data: null,\n      error\n    };\n  }\n};\n/**\n * \n * @param id \n */\n\nexport const getDataByCourseId = id => {\n  // get firebase firestore database\n  const db = firebase.firestore(); // get a reference to a specific document\n\n  const docRef = db.collection(COLLECTION_NAME_COURSE).doc(id);\n  return docRef.get().then(doc => {\n    if (doc.exists) {\n      console.log(\"Document data: \", doc.data());\n      return {\n        id: doc.id,\n        ...doc.data()\n      };\n    } else {\n      // doc.data() will be undefined in this case\n      console.log(\"No such document!\");\n    }\n  }).catch(error => {\n    console.log(\"Error getting document: \", error);\n  });\n};\nexport const firebaseAuth = firebase.auth();\nexport const firebaseApp = firebase;\nexport const firebaseStorage = firebase.storage;","map":{"version":3,"sources":["/Users/tm/Documents/CODE/STUDYPELAGO/src/data/data-services.ts"],"names":["firebase","data","initializeFirebase","firebaseConfig","apps","length","initializeApp","apiKey","process","env","REACT_APP_FIREBASE_CONFIG_API_KEY","projectId","REACT_APP_FIREBASE_CONFIG_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_CONFIG_STORAGE_BUCKET","STORAGE_FILE_PATH","COLLECTION_NAME_TUTOR","COLLECTION_NAME_COURSE","saveImage","imageData","Promise","resolve","reject","storageRef","storage","ref","uniquePathName","Date","getTime","name","child","uploadTask","put","contentType","type","on","TaskEvent","STATE_CHANGED","s","error","console","log","downloadUrl","snapshot","getDownloadURL","metadata","image","fullPath","size","timeCreated","getTutorData","db","firestore","results","querySnapshot","collection","get","forEach","doc","id","push","getCourseData","updateTutor","tutorData","set","getDataByTutorId","docRef","then","exists","catch","updateCourse","courseData","getDataByCourseId","firebaseAuth","auth","firebaseApp","firebaseStorage"],"mappings":"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","sourcesContent":["\n/// FIREBASE STUFF\n// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport firebase from \"firebase/app\";\n\n// Add the Firebase services that you want to use\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/functions\";\nimport \"firebase/storage\";\n\n// THIS HOLDS THE DATA\nconst data = [];\n\n\nexport const initializeFirebase = () => {\n\n  //INITIALIZE FIREBASE\n  var firebaseConfig = {\n\n  };\n  // Initialize Firebase\n  if (firebase.apps.length === 0) {\n    firebase.initializeApp({\n    apiKey: process.env.REACT_APP_FIREBASE_CONFIG_API_KEY,\n    projectId: process.env.REACT_APP_FIREBASE_CONFIG_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_CONFIG_STORAGE_BUCKET,\n  });\n  }\n}\ninitializeFirebase();\n\n\n// SAVE IMAGE\n//\n\n// path where data is stored in firebase storage\nconst STORAGE_FILE_PATH = \"images/tutors\";\n\n// main collection name\nconst COLLECTION_NAME_TUTOR = \"tutor-listing\";\n\n// main collection name\nconst COLLECTION_NAME_COURSE = \"course-listing\";\n\n/**\n * Saves the image to the database and returns either an error or information\n * about the object that you just saved\n * \n * @param imageData - File\n * @returns \n */\nexport const saveImage = async (imageData: any) => {\n\n  // we need the function to be async so we wrap the whole thing in a \n  // promise. We return result using the resolve parameter and an error\n  // using the reject parameter\n  return new Promise<any>((resolve, reject) => {\n\n    // get a reference to our storage in the database\n    const storageRef = firebase.storage().ref();\n\n    // create a unique path name for the image\n    let uniquePathName =\n      new Date().getTime() +\n      \"-\" +\n      imageData.name;\n\n    // get the reference that includes path in database plus the \n    // unique name we used for the image we are saving\n    let ref = storageRef.child(STORAGE_FILE_PATH + uniquePathName);\n\n    // start the upload process, we are also including the file type \n    // with the upload...\n    let uploadTask = ref.put(imageData, {\n      contentType: imageData.type\n    });\n\n    // here we listen for specific events and take action when needed\n    // error - we reject the promise and return the error we got\n    // complete - we need to get the download url and then gather other pieces\n    //   of data we want to return to the user, create an object and resolve\n    //   the promise with the data\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, {\n      'next': (s) => null,\n      'error': (error) => {\n        console.log(error);\n        reject(error);\n      },\n      'complete': async () => {\n        console.log('upload complete!');\n\n        let downloadUrl = await uploadTask.snapshot.ref.getDownloadURL();\n        let data = {\n          //   metaData: uploadTask.snapshot.metadata,\n          downloadUrl,\n          name: uploadTask.snapshot.metadata.name,\n          image: {\n            ref: uploadTask.snapshot.ref.fullPath,\n            size: uploadTask.snapshot.metadata.size,\n            contentType: uploadTask.snapshot.metadata.contentType,\n            timeCreated: uploadTask.snapshot.metadata.timeCreated\n          }\n        };\n        resolve({ data });\n      }\n    });\n  });\n\n}\n\n\n// READ DATA\n// https://firebase.google.com/docs/firestore/query-data/get-data\nexport const getTutorData = async () => {\n\n\n  // get firebase firestore database\n  const db = firebase.firestore();\n\n  const results: any = [];\n  // --\n  // GET ALL THE DOCUMENTS\n  const querySnapshot = await db.collection(COLLECTION_NAME_TUTOR).get();\n\n  // loop through documents\n  querySnapshot.forEach((doc) => {\n    // doc.data() is never undefined for query doc snapshots\n    console.log(doc.id, \" => \", doc.data());\n    results.push({\n      id: doc.id,\n      ...doc.data(), // <- JAVASCRIPT DESTRUCTURING\n    })\n  });\n  console.log(results);\n  return results;\n};\n\n\n// READ DATA\n// https://firebase.google.com/docs/firestore/query-data/get-data\nexport const getCourseData = async () => {\n\n\n  // get firebase firestore database\n  const db = firebase.firestore();\n\n  const results: any = [];\n  // --\n  // GET ALL THE DOCUMENTS\n  const querySnapshot = await db.collection(COLLECTION_NAME_COURSE).get();\n\n  // loop through ocuments\n  querySnapshot.forEach((doc) => {\n    // doc.data() is never undefined for query doc snapshots\n    console.log(doc.id, \" => \", doc.data());\n    results.push({\n      id: doc.id,\n      ...doc.data(), // <- JAVASCRIPT DESTRUCTURING\n    })\n  });\n  console.log(results);\n  return results;\n};\n\n\n/**\n * \n * @param tutorData \n * @returns \n */\nexport const updateTutor = async (tutorData: any) => {\n  // get firebase firestore database\n  const db = firebase.firestore();\n\n  try {\n    const data = await db.collection(COLLECTION_NAME_TUTOR).doc().set(tutorData)\n    return {\n      data,\n      error: null\n    }\n  } catch (error) {\n    return { data: null, error }\n  }\n}\n/**\n * \n * @param id \n */\nexport const getDataByTutorId = (id: string) => {\n\n  // get firebase firestore database\n  const db = firebase.firestore();\n\n  // get a reference to a specific document\n  const docRef = db.collection(COLLECTION_NAME_TUTOR).doc(id);\n  return docRef\n    .get()\n    .then((doc) => {\n      if (doc.exists) {\n        console.log(\"Document data:\", doc.data());\n        return {\n          id: doc.id,\n          ...doc.data()\n        }\n      } else {\n        // doc.data() will be undefined in this case\n        console.log(\"No such document!\");\n      }\n    })\n    .catch((error) => {\n      console.log(\"Error getting document:\", error);\n    });\n\n\n}\n\n/**\n * \n * @param courseData \n * @returns \n */\n export const updateCourse = async (courseData: any) => {\n  // get firebase firestore database\n  const db = firebase.firestore();\n\n  try {\n    const data = await db.collection(COLLECTION_NAME_COURSE).doc().set(courseData)\n    return {\n      data,\n      error: null\n    }\n  } catch (error) {\n    return { data: null, error }\n  }\n}\n/**\n * \n * @param id \n */\nexport const getDataByCourseId = (id: string) => {\n\n  // get firebase firestore database\n  const db = firebase.firestore();\n\n  // get a reference to a specific document\n  const docRef = db.collection(COLLECTION_NAME_COURSE).doc(id);\n  return docRef\n    .get()\n    .then((doc) => {\n      if (doc.exists) {\n        console.log(\"Document data: \", doc.data());\n        return {\n          id: doc.id,\n          ...doc.data()\n        }\n      } else {\n        // doc.data() will be undefined in this case\n        console.log(\"No such document!\");\n      }\n    })\n    .catch((error) => {\n      console.log(\"Error getting document: \", error);\n    });\n\n\n}\n\n\nexport const firebaseAuth = firebase.auth();\nexport const firebaseApp = firebase;\nexport const firebaseStorage = firebase.storage;\n"]},"metadata":{},"sourceType":"module"}