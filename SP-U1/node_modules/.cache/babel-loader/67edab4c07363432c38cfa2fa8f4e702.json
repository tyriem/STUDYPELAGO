{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './getOrCreatePrecacheController.js';\nimport { generateURLVariations } from './generateURLVariations.js';\nimport '../_version.js';\n/**\n * This function will take the request URL and manipulate it based on the\n * configuration options.\n *\n * @param {string} url\n * @param {Object} options\n * @return {string} Returns the URL in the cache that matches the request,\n * if possible.\n *\n * @private\n */\n\nexport var getCacheKeyForURL = function getCacheKeyForURL(url, options) {\n  var precacheController = getOrCreatePrecacheController();\n  var urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n\n  var _iterator = _createForOfIteratorHelper(generateURLVariations(url, options)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var possibleURL = _step.value;\n      var possibleCacheKey = urlsToCacheKeys.get(possibleURL);\n\n      if (possibleCacheKey) {\n        return possibleCacheKey;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};","map":{"version":3,"sources":["/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/workbox-precaching/utils/getCacheKeyForURL.js"],"names":["getOrCreatePrecacheController","generateURLVariations","getCacheKeyForURL","url","options","precacheController","urlsToCacheKeys","getURLsToCacheKeys","possibleURL","possibleCacheKey","get"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,6BAAT,QAA8C,oCAA9C;AACA,SAASC,qBAAT,QAAsC,4BAAtC;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,MAAMC,kBAAkB,GAAGL,6BAA6B,EAAxD;AACA,MAAMM,eAAe,GAAGD,kBAAkB,CAACE,kBAAnB,EAAxB;;AAF+C,6CAGrBN,qBAAqB,CAACE,GAAD,EAAMC,OAAN,CAHA;AAAA;;AAAA;AAG/C,wDAA+D;AAAA,UAApDI,WAAoD;AAC3D,UAAMC,gBAAgB,GAAGH,eAAe,CAACI,GAAhB,CAAoBF,WAApB,CAAzB;;AACA,UAAIC,gBAAJ,EAAsB;AAClB,eAAOA,gBAAP;AACH;AACJ;AAR8C;AAAA;AAAA;AAAA;AAAA;AASlD,CATM","sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './getOrCreatePrecacheController.js';\nimport { generateURLVariations } from './generateURLVariations.js';\nimport '../_version.js';\n/**\n * This function will take the request URL and manipulate it based on the\n * configuration options.\n *\n * @param {string} url\n * @param {Object} options\n * @return {string} Returns the URL in the cache that matches the request,\n * if possible.\n *\n * @private\n */\nexport const getCacheKeyForURL = (url, options) => {\n    const precacheController = getOrCreatePrecacheController();\n    const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n    for (const possibleURL of generateURLVariations(url, options)) {\n        const possibleCacheKey = urlsToCacheKeys.get(possibleURL);\n        if (possibleCacheKey) {\n            return possibleCacheKey;\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}