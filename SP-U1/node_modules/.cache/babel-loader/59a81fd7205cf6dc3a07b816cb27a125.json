{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\n\nvar NetworkFirst = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} options.fetchOptions Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of all fetch() requests made by this strategy.\n   * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   * @param {number} options.networkTimeoutSeconds If set, any network requests\n   * that fail to respond within the timeout will fallback to the cache.\n   *\n   * This option can be used to combat\n   * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n   * scenarios.\n   */\n  function NetworkFirst() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, NetworkFirst);\n\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n\n    if (options.plugins) {\n      var isUsingCacheWillUpdate = options.plugins.some(function (plugin) {\n        return !!plugin.cacheWillUpdate;\n      });\n      this._plugins = isUsingCacheWillUpdate ? options.plugins : [cacheOkAndOpaquePlugin].concat(_toConsumableArray(options.plugins));\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n\n    this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._networkTimeoutSeconds) {\n        assert.isType(this._networkTimeoutSeconds, 'number', {\n          moduleName: 'workbox-strategies',\n          className: 'NetworkFirst',\n          funcName: 'constructor',\n          paramName: 'networkTimeoutSeconds'\n        });\n      }\n    }\n\n    this._fetchOptions = options.fetchOptions;\n    this._matchOptions = options.matchOptions;\n  }\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link module:workbox-routing.Router}.\n   *\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {Event} [options.event] The event that triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  _createClass(NetworkFirst, [{\n    key: \"handle\",\n    value: function () {\n      var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var event, request, logs, promises, timeoutId, _this$_getTimeoutProm, id, promise, networkPromise, response, _iterator, _step, log;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event = _ref.event, request = _ref.request;\n                logs = [];\n\n                if (typeof request === 'string') {\n                  request = new Request(request);\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-strategies',\n                    className: 'NetworkFirst',\n                    funcName: 'handle',\n                    paramName: 'makeRequest'\n                  });\n                }\n\n                promises = [];\n\n                if (this._networkTimeoutSeconds) {\n                  _this$_getTimeoutProm = this._getTimeoutPromise({\n                    request: request,\n                    event: event,\n                    logs: logs\n                  }), id = _this$_getTimeoutProm.id, promise = _this$_getTimeoutProm.promise;\n                  timeoutId = id;\n                  promises.push(promise);\n                }\n\n                networkPromise = this._getNetworkPromise({\n                  timeoutId: timeoutId,\n                  request: request,\n                  event: event,\n                  logs: logs\n                });\n                promises.push(networkPromise); // Promise.race() will resolve as soon as the first promise resolves.\n\n                _context.next = 10;\n                return Promise.race(promises);\n\n              case 10:\n                response = _context.sent;\n\n                if (response) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.next = 14;\n                return networkPromise;\n\n              case 14:\n                response = _context.sent;\n\n              case 15:\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.groupCollapsed(messages.strategyStart('NetworkFirst', request));\n                  _iterator = _createForOfIteratorHelper(logs);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      log = _step.value;\n                      logger.log(log);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  messages.printFinalResponse(response);\n                  logger.groupEnd();\n                }\n\n                if (response) {\n                  _context.next = 18;\n                  break;\n                }\n\n                throw new WorkboxError('no-response', {\n                  url: request.url\n                });\n\n              case 18:\n                return _context.abrupt(\"return\", response);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handle(_x) {\n        return _handle.apply(this, arguments);\n      }\n\n      return handle;\n    }()\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getTimeoutPromise\",\n    value: function _getTimeoutPromise(_ref2) {\n      var _this = this;\n\n      var request = _ref2.request,\n          logs = _ref2.logs,\n          event = _ref2.event;\n      var timeoutId;\n      var timeoutPromise = new Promise(function (resolve) {\n        var onNetworkTimeout = /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (process.env.NODE_ENV !== 'production') {\n                      logs.push(\"Timing out the network response at \" + \"\".concat(_this._networkTimeoutSeconds, \" seconds.\"));\n                    }\n\n                    _context2.t0 = resolve;\n                    _context2.next = 4;\n                    return _this._respondFromCache({\n                      request: request,\n                      event: event\n                    });\n\n                  case 4:\n                    _context2.t1 = _context2.sent;\n                    (0, _context2.t0)(_context2.t1);\n\n                  case 6:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          return function onNetworkTimeout() {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n\n        timeoutId = setTimeout(onNetworkTimeout, _this._networkTimeoutSeconds * 1000);\n      });\n      return {\n        promise: timeoutPromise,\n        id: timeoutId\n      };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getNetworkPromise\",\n    value: function () {\n      var _getNetworkPromise2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4) {\n        var timeoutId, request, logs, event, error, response, responseClone, cachePut;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                timeoutId = _ref4.timeoutId, request = _ref4.request, logs = _ref4.logs, event = _ref4.event;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return fetchWrapper.fetch({\n                  request: request,\n                  event: event,\n                  fetchOptions: this._fetchOptions,\n                  plugins: this._plugins\n                });\n\n              case 4:\n                response = _context3.sent;\n                _context3.next = 10;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](1);\n                error = _context3.t0;\n\n              case 10:\n                if (timeoutId) {\n                  clearTimeout(timeoutId);\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  if (response) {\n                    logs.push(\"Got response from network.\");\n                  } else {\n                    logs.push(\"Unable to get a response from the network. Will respond \" + \"with a cached response.\");\n                  }\n                }\n\n                if (!(error || !response)) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                _context3.next = 15;\n                return this._respondFromCache({\n                  request: request,\n                  event: event\n                });\n\n              case 15:\n                response = _context3.sent;\n\n                if (process.env.NODE_ENV !== 'production') {\n                  if (response) {\n                    logs.push(\"Found a cached response in the '\".concat(this._cacheName, \"'\") + \" cache.\");\n                  } else {\n                    logs.push(\"No response found in the '\".concat(this._cacheName, \"' cache.\"));\n                  }\n                }\n\n                _context3.next = 22;\n                break;\n\n              case 19:\n                // Keep the service worker alive while we put the request in the cache\n                responseClone = response.clone();\n                cachePut = cacheWrapper.put({\n                  cacheName: this._cacheName,\n                  request: request,\n                  response: responseClone,\n                  event: event,\n                  plugins: this._plugins\n                });\n\n                if (event) {\n                  try {\n                    // The event has been responded to so we can keep the SW alive to\n                    // respond to the request\n                    event.waitUntil(cachePut);\n                  } catch (err) {\n                    if (process.env.NODE_ENV !== 'production') {\n                      logger.warn(\"Unable to ensure service worker stays alive when \" + \"updating cache for '\".concat(getFriendlyURL(request.url), \"'.\"));\n                    }\n                  }\n                }\n\n              case 22:\n                return _context3.abrupt(\"return\", response);\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 7]]);\n      }));\n\n      function _getNetworkPromise(_x2) {\n        return _getNetworkPromise2.apply(this, arguments);\n      }\n\n      return _getNetworkPromise;\n    }()\n    /**\n     * Used if the network timeouts or fails to make the request.\n     *\n     * @param {Object} options\n     * @param {Request} request The request to match in the cache\n     * @param {Event} [options.event]\n     * @return {Promise<Object>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_respondFromCache\",\n    value: function _respondFromCache(_ref5) {\n      var event = _ref5.event,\n          request = _ref5.request;\n      return cacheWrapper.match({\n        cacheName: this._cacheName,\n        request: request,\n        event: event,\n        matchOptions: this._matchOptions,\n        plugins: this._plugins\n      });\n    }\n  }]);\n\n  return NetworkFirst;\n}();\n\nexport { NetworkFirst };","map":{"version":3,"sources":["/Users/tm/Documents/CODE/ION/STUDYPELAGO/node_modules/workbox-strategies/NetworkFirst.js"],"names":["assert","cacheNames","cacheWrapper","fetchWrapper","getFriendlyURL","logger","WorkboxError","messages","cacheOkAndOpaquePlugin","NetworkFirst","options","_cacheName","getRuntimeName","cacheName","plugins","isUsingCacheWillUpdate","some","plugin","cacheWillUpdate","_plugins","_networkTimeoutSeconds","networkTimeoutSeconds","process","env","NODE_ENV","isType","moduleName","className","funcName","paramName","_fetchOptions","fetchOptions","_matchOptions","matchOptions","event","request","logs","Request","isInstance","promises","_getTimeoutPromise","id","promise","timeoutId","push","networkPromise","_getNetworkPromise","Promise","race","response","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","timeoutPromise","resolve","onNetworkTimeout","_respondFromCache","setTimeout","fetch","error","clearTimeout","responseClone","clone","cachePut","put","waitUntil","err","warn","match"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} options.networkTimeoutSeconds If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: 'NetworkFirst',\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'NetworkFirst',\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, event, logs });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({ timeoutId, request, event, logs });\n        promises.push(networkPromise);\n        // Promise.race() will resolve as soon as the first promise resolves.\n        let response = await Promise.race(promises);\n        // If Promise.race() resolved with null, it might be due to a network\n        // timeout + a cache miss. If that were to happen, we'd rather wait until\n        // the networkPromise resolves instead of returning null.\n        // Note that it's fine to await an already-resolved promise, so we don't\n        // have to check to see if it's still \"in flight\".\n        if (!response) {\n            response = await networkPromise;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('NetworkFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, event }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await this._respondFromCache({ request, event }));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, event }) {\n        let error;\n        let response;\n        try {\n            response = await fetchWrapper.fetch({\n                request,\n                event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins,\n            });\n        }\n        catch (err) {\n            error = err;\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await this._respondFromCache({ request, event });\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this._cacheName}'` +\n                        ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this._cacheName}' cache.`);\n                }\n            }\n        }\n        else {\n            // Keep the service worker alive while we put the request in the cache\n            const responseClone = response.clone();\n            const cachePut = cacheWrapper.put({\n                cacheName: this._cacheName,\n                request,\n                response: responseClone,\n                event,\n                plugins: this._plugins,\n            });\n            if (event) {\n                try {\n                    // The event has been responded to so we can keep the SW alive to\n                    // respond to the request\n                    event.waitUntil(cachePut);\n                }\n                catch (err) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        return response;\n    }\n    /**\n     * Used if the network timeouts or fails to make the request.\n     *\n     * @param {Object} options\n     * @param {Request} request The request to match in the cache\n     * @param {Event} [options.event]\n     * @return {Promise<Object>}\n     *\n     * @private\n     */\n    _respondFromCache({ event, request }) {\n        return cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n    }\n}\nexport { NetworkFirst };\n"]},"metadata":{},"sourceType":"module"}